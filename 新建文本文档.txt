# 99-2-应该收集代码

* 维护旧项目：jq干货知识：

* ※※※※※※※※※※※※※※※※※※※※※※※※※※※※※layui.form：
 var form = layui.form //获取form模块
  ,upload = layui.upload; //获取upload模块
 var layer = layui.layer //获得layer模块
  ,laypage = layui.laypage //获得laypage模块
  ,laydate = layui.laydate; //获得laydate模块
  

※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※验证
大多数时候你只需要在表单元素上加上 lay-verify="" 属性值即可
<input type="text" lay-verify="email"> 
 
还同时支持多条规则的验证，如下：
<input type="text" lay-verify="required|phone|number">
layui.code
form.verify({
  username: function(value, item){ //value：表单的值、item：表单的DOM对象
    if(!new RegExp("^[a-zA-Z0-9_\u4e00-\u9fa5\\s·]+$").test(value)){
      return '用户名不能有特殊字符';
    }
    if(/(^\_)|(\__)|(\_+$)/.test(value)){
      return '用户名首尾不能出现下划线\'_\'';
    }
    if(/^\d+\d+\d$/.test(value)){
      return '用户名不能全为数字';
    }
    
    //如果不想自动弹出默认提示框，可以直接返回 true，这时你可以通过其他任意方式提示（v2.5.7 新增）
    if(value === 'xxx'){
      alert('用户名不能为敏感词');
      return true;
    }
  }
  
  //我们既支持上述函数式的方式，也支持下述数组的形式
  //数组的两个值分别代表：[正则匹配、匹配不符时的提示文字]
  ,pass: [
    /^[\S]{6,12}$/
    ,'密码必须6到12位，且不能出现空格'
  ] 
});      
※※※※※※※※※※※※※※※※※※※※※※※※※※※※※赋值
form.val("formTest", { //formTest 即 class="layui-form" 所在元素属性 lay-filter="" 对应的值
  "username": "贤心" // "name": "value"
  ,"sex": "女"
  ,"auth": 3
  ,"check[write]": true
  ,"open": false
  ,"desc": "我爱layui"
});
※※※※※※※※※※※※※※※※※※※※※※※※※※※※※获取
var data1 = form.val("formTest");
* layer：基本使用方法！

※※※※※※※※※※※※※※※※※※※※※※※※※※※※※  * 简单弹窗
layer.msg(content, options, end) 
  * ※※※※※※※※※※※※※※※※※※※※※※※※※※※※※询问弹窗
//eg1
layer.confirm('is not?', {icon: 3, title:'提示'}, function(index){
  //do something
  
  layer.close(index);
});
  ※※※※※※※※※※※※※※※※※※※※※※※※※※※※※* 吸附弹窗
//eg1
layer.tips('只想提示地精准些', '#id');
//eg 2
$('#id').on('click', function(){
  var that = this;
  layer.tips('只想提示地精准些', that); //在元素的事件回调体中，follow直接赋予this即可
});
//eg 3
layer.tips('在上面', '#id', {
  tips: 1
});
※※※※※※※※※※※※※※※※※※※※※※※※※※※※※  * **今天：内容弹窗！！**

  // 弹窗：非常常用知识！
  layer.open({
    type: 1, // 页面层，弹窗内部设置一些页面结构 HTML结构！
    title: '添加类别', // 左上角显示标题
    area: ['500px', '250px'], // area区域：弹窗宽和高！
    content: add_str, // content:内容？弹窗的内容！HTML结构字符串！

    // 当弹窗弹出成功时调用这个函数：
    success: function(dom, index) {
      // dom 弹窗dom节点！
      // index:弹窗标识；
      // 提交事件： 弹窗成功后：在此函数内部可以获取 form表单元素
      addSub(index);
    }
  });



※※※※※※※※※※※※※※※※※※※※※※※※※※※※※* cropper：生僻，有可能用！
$('#image').cropper({
  aspectRatio: 1 / 1, // 纵横比:正方形

  preview: '.img-preview' // 指定预览区的类名（css选择器字符串）
});
※※※※※※※※※※※※※※※※※※※※※※※※※※※※※
  * 1.图片裁剪工具；基本初始化使用；
  * 2.配合选择图片按钮，把cropper初始化的图片地址替换；
  * 3.配合cropper：如何把图片对象信息转化为**base64图片流；**


```js
// 1.准备数据：用插件 准备 base64位字符串；
let canvas = $('#image').cropper('getCroppedCanvas', {
    width: 100,
    height: 100
});
// 4.2) 把canvas图片转成base64格式，得到超长字符串
let str = canvas.toDataURL('image/png');
```

